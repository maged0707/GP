#include <Servo.h>. 
   
 // Defines Tirg and Echo pins of the Ultrasonic Sensor  
 const int trigPin = 5;  
 const int echoPin = 6; 
 const int led1 = 9 ;
 const int led2 = 10;
 const int led3 = 11;
 const int led4 = 12;
 const int buzzer = 13;


 // Variables for the duration and the distance  
 long duration;  
 int distance;  
 Servo myServo;                       // Creates a servo object for controlling the servo motor  


 void setup() {  
  pinMode (led1, OUTPUT);
  pinMode (led2, OUTPUT);
  pinMode (led3, OUTPUT);
  pinMode (led4, OUTPUT);
  pinMode (buzzer, OUTPUT);
  pinMode(trigPin, OUTPUT);           // Sets the trigPin as an Output  
  pinMode(echoPin, INPUT);            // Sets the echoPin as an Input  
  Serial.begin(9600);  
  myServo.attach(3);                  // Defines on which pin is the servo motor attached  
 }  


 void loop() {  
  // rotates the servo motor from 15 to 165 degrees  
  for(int i=10;i<=170;i++){   
  myServo.write(i);  
  delay(100);  
  distance = calculateDistance();     // Calls a function for calculating the distance measured by the Ultrasonic sensor for each degree  
  Serial.print(i);                    // Sends the current degree into the Serial Port  
  Serial.print(",");                  // Sends addition character right next to the previous value needed later in the Processing IDE for indexing  
  Serial.print(distance);             // Sends the distance value into the Serial Port  
  Serial.print(".");
  updateLedsAndBuzzer();                  // Sends addition character right next to the previous value needed later in the Processing IDE for indexing  
  }  
  
  // Repeats the previous lines from 165 to 15 degrees  
  for(int i=170;i>10;i--){   
  myServo.write(i);  
  delay(100);  
  distance = calculateDistance();  
  Serial.print(i);  
  Serial.print(",");  
  Serial.print(distance);  
  Serial.print(".");  
  updateLedsAndBuzzer();
  }  
 }  

 
 // Function for calculating the distance measured by the Ultrasonic sensor  
 int calculateDistance(){   
  digitalWrite(trigPin, LOW);   
  delayMicroseconds(2);  
  // Sets the trigPin on HIGH state for 10 micro seconds  
  digitalWrite(trigPin, HIGH);   
  delayMicroseconds(10);  
  digitalWrite(trigPin, LOW);  
  duration = pulseIn(echoPin, HIGH);    // Reads the echoPin, returns the sound wave travel time in microseconds  
  distance= duration*0.034/2;  
  return distance;  
 } 
 void updateLedsAndBuzzer() {
  if (distance < 10) {
     digitalWrite(led1, HIGH);
    digitalWrite(led2, HIGH);
    digitalWrite(led3, HIGH);
    digitalWrite(led4, HIGH);
    tone(buzzer, 1000);
     } else if (distance < 20) {
      digitalWrite(led1, LOW);
    digitalWrite(led2, HIGH);
    digitalWrite(led3, HIGH);
    digitalWrite(led4, HIGH);
    noTone(buzzer);
  } else if (distance < 30) {
  digitalWrite(led1, LOW);
    digitalWrite(led2, LOW);
    digitalWrite(led3, HIGH);
    digitalWrite(led4, HIGH);
    noTone(buzzer);
     } else if (distance < 40) {
  digitalWrite(led1, LOW);
    digitalWrite(led2, LOW);
    digitalWrite(led3, LOW);
    digitalWrite(led4, HIGH);
    noTone(buzzer);
} else {
  digitalWrite(led1, LOW);
    digitalWrite(led2, LOW);
    digitalWrite(led3, LOW);
    digitalWrite(led4, LOW);
    noTone(buzzer);
  }
}
